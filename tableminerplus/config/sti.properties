####################
#	FILE PATHS #
####################
# STI home folder. All other file paths wil be relative to this (except otherwise stated). 
sti.home=<path_to_project>

# Folder containing nlp resources (by default this is the '\\resource' folder in the distribution)
sti.nlp=resources

# Folder containing cached data (must be ABSOLUTE PATH). Whenever KB search or Web search is performed, the query and results are cached in a Solr instance. This specifies the path to Solr. (by default this is the \\resources\\cache\\empty folder in the distribution. The folder contains only solr schemas, but no data. This means you can use them directly as long as you correct the path. And the system will begin with remotely querying KB or the Web and gradually builds up the cache). 
sti.cache.main.dir=<path_to_project>/resources/cache/empty

# Web search configuration file. By default this is located in the config folder of the distribution
sti.websearch.properties=config/websearch.properties

# KB search configuration file. By default this is located in the config folder of the distribution
sti.kbsearch.propertyfile=config/kbsearch.properties

# When STI is run in batch mode (e.g., processing a folder containing multiple input files, by using an instance of uk.ac.shef.dcs.sti.experiment.STIBatch), it loads in all files and sort them by file name. If for any input file the process failed due to any exception, the indexes of such files (as index of the file in the sorted list) are written to this provided file. 
sti.list.failure=resources/failed.txt

# [IF YOU USE UI, this property is not needed]Input files must be parsed to create an internal uk.ac.shef.dcs.sti.core.model.Table objects. Depending on the input data files, specific TableParser class must be implemented and specified here. The class must have a defult constructor that does not take any arguments
sti.input.parser.class=uk.ac.shef.dcs.sti.parser.table.TableParserLimayeDataset


####################################
#	SELECTIVE START (generic   #
####################################
# STI tries to classify the data type of table columns, and typically only certain types of columns are passed for interpretation. While this process is highly accurate, it is not guaranteed to be perfect so in some occassions it is possible to have, e.g., NE-columns mis-classified as numeric, or long text. Therefore, for all input tables, if you know some columns should not be considered for interpretation, specify them here as a comma delimieted string. E.g, '0,1,5' will tell STI to ignore the first, 2nd and 6th columns in input tables.
sti.columns.ignore=
# Similar as the above, if you know some columns must be analyzed, you can provide their index here
sti.columns.mustdo=


####################################
#	SELECTIVE START (batch)	   #
####################################
# when running in batch mode, instead of always processing the entire input folder, starting from the first file, it is possible to make the process selective by defining the following parameters

# Given the input files read from a folder sorted by their file names, you can choose to start from a particular index position in the sorted list. The first file's index is 0. This is useful when, e.g., the previously process broke down and you want to continue from a particular position. The index position of each processed input file will be output in the log file
sti.start=0
# Similar as above, you can provide a list of indexes representing the files you want to process. Note that if this variable is defined, ONLY THESE SPECIFIED files will be processed. This variable must be an absolute file path pointing to a plain text file, where each line is the index of a file in the sorted input folder. Leave this variable empty if you do not want to be selective
sti.list.select=


################################################
#	Subject column detection, the ws scorer	   #
################################################

# Whether STI should use the ws score in detecting subject column
sti.subjectcolumndetection.ws=false
# If ws is used, what stopping criteria class should be used
sti.iinf.websearch.stopping.class=uk.ac.shef.dcs.sti.core.algorithm.tmp.stopping.IInf
# if ws is used, for the stopping criteria class provided above, also provide its contructor parameters in the order it is defined in the class, delimited by ,
sti.iinf.websearch.stopping.class.constructor.params=0.0,1,0.01


########################
# RELATION ENUMERATION #
########################
# Choose whether or not STI should annotate relations
sti.learning.relation=true

##########
# OUTPUT #
##########

# What is the namespace that the KB uses
sti.output.triple.namespace.kb=www.freebase.org
# What is the namespace to use for newly extracted classes, relations and entities that are not available in the KB
sti.output.triple.namespace.default=www.shef.ac.uk






#############################################################
# TABLEMINER+: LEARNING (only needed if you run tableminer+ #
#############################################################
# What stopping criteria class should be used in the iinf for preliminary column classification
sti.tmp.iinf.learning.stopping.class=uk.ac.shef.dcs.sti.core.algorithm.tmp.stopping.IInf
# for the stopping criteria class provided above, also provide its contructor parameters in the order it is defined in the class values separated by ,
sti.tmp.iinf.learning.stopping.class.constructor.params=0.0,1,0.05



#############################################################
# BASELINE: (only needed if you run baseline nm or sim)     #
#############################################################
# what baseline method to use. Two options: nm=name match; sim=string similarity based
sti.baseline.method=sim
# if string similarity based baseline is used, define what string similarity metric to be used. This must be the name of the method of class org.simmetrics.metrics.StringMetrics (simmetrics library), which you want to call and obtain an instance of StringMetric
sti.baseline.similarity.stringmetrics.method=levenshtein



#############################################################
# SEMANTIC MESSAGE PASSING: (only needed if you run smp)    #
#############################################################
# whether smp should use tableminer+ subject column detection and use the information of subejct column in interpretation
sti.smp.usesubjectcolumn=false
# the choice of entity ranker to use. Two options: tmp to use the cell disambiguation method proposed by tableminer+; smpfreebase to use the method adapted from the original smp algorithm to Freebase
sti.smp.entityranker=smpfreebase
# maximum number of iterations in the semantic message passing phase. default is 10 if not provided
sti.smp.halting.maxiteration=10
# when smp computes changemessages, it will check the score assigned to the annotations of the cell, column or relation. If the score is less than this threshold, it is considered 'unstable' and therefore a changemessage is created to indicate that in the next iteration, this cell\\column\\relation's annotation should be changed
sti.smp.changemessage.minscore=0.5
# an implementation class of uk.ac.shef.dcs.sti.core.algorithm.smp.ClazzSpecificityCalculator, which should compute the specificity score of a class from the KB. This class will be created via reflection, so if new implementing classes are created, you must revise uk.ac.shef.dcs.sti.experiment.SemanticMessagePassingBatch getClazzSpecificityCalculator() method that is responsible for instance creation accordingly
sti.smp.clazzspecificitycalculator=uk.ac.shef.dcs.sti.core.algorithm.smp.FreebaseClazzSpecificityCalculator




#############################################################
# JOINT INFERENCE: (only needed if you run ji) 			    #
#############################################################
# whether smp should use tableminer+ subject column detection and use the information of subejct column in interpretation
sti.ji.usesubjectcolumn=false
# the maximum number of iterations of joint inference. If set to 0, inference will continue until convergence (if possible)
sti.ji.maxiterations=0
# if true additional procedure will be performed to check the consistency of the created factor graph and output additional logs
sti.ji.debugmode=false
# an implementation class of uk.ac.shef.dcs.sti.core.algorithm.smp.ClazzSpecificityCalculator, which should compute the specificity score of a class from the KB. This class will be created via reflection, so if new implementing classes are created, you must revise uk.ac.shef.dcs.sti.experiment.SemanticMessagePassingBatch getClazzSpecificityCalculator() method that is responsible for instance creation accordingly
sti.ji.clazzspecificitycalculator=uk.ac.shef.dcs.sti.core.algorithm.smp.FreebaseClazzSpecificityCalculator
